/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CapaPresentacio;


import CapaDomini.Misc.Colors;
import CapaDomini.Misc.Fonts;
import CapaDomini.Partida.CurrentGameController;
import CapaDomini.Partida.Help;
import CapaDomini.Tauler.HidatoManagerController;
import CapaDomini.Tauler.SolverControllerStop;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author David
 */
public class FrameEditor extends javax.swing.JFrame {

    /*
     * Creadora amb parametres
     */
    public FrameEditor(AdminVistes parent, HidatoManagerController hmc) {
        initComponents();
        inici(parent, hmc);
        setIconImage((new ImageIcon("icon.png")).getImage());
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        b_autocompletar = new javax.swing.JButton();
        b_validar = new javax.swing.JButton();
        b_esborrar_tot = new javax.swing.JButton();
        label_dificultat = new javax.swing.JLabel();
        b_desar = new javax.swing.JButton();
        b_sortir = new javax.swing.JButton();
        b_solucio = new javax.swing.JButton();
        b_jugar = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        label_nom = new javax.swing.JLabel();
        panel_edicio = new javax.swing.JPanel();
        b_buida_esborrar = new javax.swing.JRadioButton();
        b_pista_posar = new javax.swing.JRadioButton();
        b_void = new javax.swing.JRadioButton();
        b_buida_posar = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor de hidato");
        setBounds(new java.awt.Rectangle(0, 0, 800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
        );

        b_autocompletar.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_autocompletar.setText("Autocompletar i validar");

        b_validar.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_validar.setText("Validar");

        b_esborrar_tot.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_esborrar_tot.setText("Esborrar tot");

        label_dificultat.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        label_dificultat.setText("Dificultat no calculada");

        b_desar.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_desar.setText("Desar");

        b_sortir.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_sortir.setText("Sortir");

        b_solucio.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_solucio.setText("Mostrar solució");

        b_jugar.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_jugar.setText("Jugar hidato");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_autocompletar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_validar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_esborrar_tot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_solucio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(label_dificultat, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(b_desar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b_sortir, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(b_jugar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_dificultat, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_esborrar_tot, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_autocompletar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_validar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_solucio, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_jugar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_sortir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_desar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        label_nom.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        label_nom.setText("Hidato:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_nom, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_nom, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
        );

        panel_edicio.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Opcions d'edició de casella", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, Fonts.getFont("OpenSans-Light", Font.PLAIN, 18)));

        b_buida_esborrar.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_buida_esborrar.setText("Buida (esborrar número)");

        b_pista_posar.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_pista_posar.setText("Pista (posar número)");

        b_void.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_void.setText("No vàlida");

        b_buida_posar.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 18));
        b_buida_posar.setText("Buida (posar número)");

        javax.swing.GroupLayout panel_edicioLayout = new javax.swing.GroupLayout(panel_edicio);
        panel_edicio.setLayout(panel_edicioLayout);
        panel_edicioLayout.setHorizontalGroup(
            panel_edicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_edicioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_edicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_buida_esborrar)
                    .addComponent(b_pista_posar)
                    .addComponent(b_void)
                    .addComponent(b_buida_posar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_edicioLayout.setVerticalGroup(
            panel_edicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_edicioLayout.createSequentialGroup()
                .addComponent(b_buida_esborrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_buida_posar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_pista_posar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_void))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panel_edicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(panel_edicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Funció que es duu a terme quan es va a tancar el formulari.
     * Guarda tot abans de tancar.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        parent.saveBeforeClose();
    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_autocompletar;
    private javax.swing.JRadioButton b_buida_esborrar;
    private javax.swing.JRadioButton b_buida_posar;
    private javax.swing.JButton b_desar;
    private javax.swing.JButton b_esborrar_tot;
    private javax.swing.JButton b_jugar;
    private javax.swing.JRadioButton b_pista_posar;
    private javax.swing.JButton b_solucio;
    private javax.swing.JButton b_sortir;
    private javax.swing.JButton b_validar;
    private javax.swing.JRadioButton b_void;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel label_dificultat;
    private javax.swing.JLabel label_nom;
    private javax.swing.JPanel panel_edicio;
    // End of variables declaration//GEN-END:variables

    // =============================AQUI LO MEU=================================

    
    /*
     * Array amb tots els SquareCells que formen el hidato en pantalla
     */
    private ArrayList<ArrayList<SquareCell>> panels;
    
    /*
     * Array amb els valors que l'usuari ha fixat sobre el hidato que s'edita
     */
    private ArrayList<ArrayList<Integer>> fixats;
    
    /*
     * Mida del hidato editat (N: files, M: columnes)
     */
    private int N, M;
    
    /*
     * Controlador HidatoManagerController per manejar el hidato que s'esta
     * editant
     */
    private HidatoManagerController hmc;
    
    /*
     * Controlador AdminVistes per fer canvis de vista
     */
    private AdminVistes parent;
    
    /*
     * Grup de botons que inclou els RadioButton d'edició
     */
    private ButtonGroup g1;
    
    /*
     * Nom del hidato que s'està editant
     */
    private String nomHidato;
    
    /*
     * Indica si s'està mostrant la solució en aquest moment o no
     */
    private boolean solMostrada;
    
    /*
     * Referència al objecte this (per quan l'entorn no permet fer-ho)
     */
    private final FrameEditor dis = this;
    
    /*
     * Diàleg que s'obre quan s'està resolent o generant un hidato
     */
    DialogProgressBar dialog;
    
    
    /*
     * Funció que es duu a terme al crear l'objecte.
     * Actualitza els parametres, dibuixa el hidato que s'està editant en
     * pantalla, posa l'estat inicial dels botons
     */
    public void inici(AdminVistes parent, HidatoManagerController hmc) {
        this.N = hmc.getTempSizeX();
        this.M = hmc.getTempSizeY();
        this.hmc = hmc;
        this.parent = parent;
        nomHidato = hmc.getTempBoardName();
        if (nomHidato == null) {
            label_nom.setText("Hidato no guardat");
            poderDesar(false);
        }
        else {
            label_nom.setText("Hidato: "+nomHidato);
            poderDesar(true);
        }
        label_nom.setFont(Fonts.getFont("OpenSans-Light", Font.PLAIN, 48));
        
        
        solMostrada = false;
        
        
        panels = new ArrayList<>();
        fixats = new ArrayList<>();
        int maxim, N1, N2, M1, M2;
        maxim = Math.max(N,M);
        N1 = (maxim-N)/2;
        N2 = N + N1;
        M1 = (maxim-M)/2;
        M2 = M + M1;
        boolean resolt = true;
        jPanel1.setLayout(new GridLayout(maxim, maxim));
        for (int i0 = 0; i0 < maxim; ++i0) {
            panels.add(new ArrayList<>());
            fixats.add(new ArrayList<>());
            for (int j0 = 0; j0 < maxim; ++j0) {
                if (N1 <= i0 && i0 < N2 && M1 <= j0 && j0 < M2) {
                    int i = i0-N1, j = j0-M1;
                    int val = hmc.getTempCellVal(i,j);
                    CapaDomini.Tauler.Type type = hmc.getTempCellType(i,j);
                    if (type != CapaDomini.Tauler.Type.VOID && val == 0) resolt = false;
                    if (type != CapaDomini.Tauler.Type.GIVEN) val = 0;
                    SquareCell p = new SquareCell(i,j,val,type,Colors.c(2),Colors.c(4),Colors.c(1),Colors.c(0), 450/maxim*5/10,true);
                    panels.get(i).add(p);
                    fixats.get(i).add(val);
                    jPanel1.add(p, i0*maxim+j0);
                    p.setType(hmc.getTempCellType(i,j));
                    p.addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mousePressed(java.awt.event.MouseEvent evt) {
                            mousePress((SquareCell) evt.getComponent());
                        }
                        @Override
                        public void mouseReleased(java.awt.event.MouseEvent evt) {
                            mouseRelease((SquareCell) evt.getComponent());
                        }
                    });
                }
                else {
                    JPanel p = new JPanel();
                    jPanel1.add(p,i0*maxim+j0);
                }
            }
        }
        if (resolt) {
            poderDesar(true);
        }
        g1 = new ButtonGroup();
        g1.add(b_buida_esborrar); g1.add(b_pista_posar); g1.add(b_void); g1.add(b_buida_posar);
        
        configurarBotons();
        //canviarColors(this);
        
    }
    
    /*
     * Configura els listeners dels botons Esborrar tot, Autocompletar, Validar,
     * Desar, Sortir, Mostrar solució i Jugar hidato
     */
    private void configurarBotons() {
        b_esborrar_tot.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                for (int i = 0; i < N; ++i) {
                    for (int j = 0; j < M; ++j) {
                        hmc.setTempCellVal(i, j, 0);
                        panels.get(i).get(j).setVal(0);
                        hmc.setTempCellType(i, j, CapaDomini.Tauler.Type.BLANK);
                        panels.get(i).get(j).setType(CapaDomini.Tauler.Type.BLANK);
                        fixats.get(i).set(j,0);
                    }
                }
                poderDesar(false);
            }
        });
        b_autocompletar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (!hmc.tempHasOrigin()) {
                    msgError ("No s'ha pogut completar el hidato perquè no té casella inicial");
                    return;
                }
                posarZeros();
                dis.setEnabled(false);
                Thread t = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        SolverControllerStop.allow();
                        boolean completat = hmc.completeTempHidato();
                        if (!SolverControllerStop.isStopped()) {
                            dis.setEnabled(true);
                            if (dialog != null) dialog.dispose();
                            if (completat) {
                                for (int i = 0; i < N; ++i) {
                                    for (int j = 0; j < M; ++j) {
                                        CapaDomini.Tauler.Type t = hmc.getTempCellType(i, j);
                                        panels.get(i).get(j).setType(t);
                                        int val = hmc.getTempCellVal(i, j);
                                        if (t == CapaDomini.Tauler.Type.GIVEN) panels.get(i).get(j).setVal(val);
                                    }
                                }
                                poderDesar(true);
                                msgInfo ("S'ha completat el hidato. Ara ja es pot desar.");
                            }
                            else {
                                msgError ("No s'ha pogut completar el hidato");
                            }
                        }
                    }
                });
                dialog = obrirProgressBar("Completant el hidato...");
                t.start();
            }
        });
        b_validar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (!hmc.tempHasOrigin()) {
                    msgError ("No s'ha pogut completar el hidato perquè no té casella inicial");
                    return;
                }
                if (!hmc.tempHasFinal()) {
                    msgError ("No s'ha pogut completar el hidato perquè no té casella final");
                    return;
                }
                posarZeros();
                dis.setEnabled(false);
                Thread t = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        SolverControllerStop.allow();
                        boolean completat = hmc.solveTempHidato();
                        if (!SolverControllerStop.isStopped()) {
                            dis.setEnabled(true);
                            if (dialog != null) dialog.dispose();
                            if (completat) {
                                poderDesar(true);
                                msgInfo ("S'ha validat el hidato. Ara ja es pot desar.");
                            }
                            else {
                                msgError ("No s'ha pogut validar el hidato");
                            }
                        }
                    }
                });
                dialog = obrirProgressBar("Buscant una solució...");
                t.start();
            }
        });
        b_desar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                desar();
            }
        });
        b_sortir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                parent.obrirMenu(dis);
            }
        });
        b_solucio.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (solMostrada) {
                    b_solucio.setText("Mostrar solució");
                    noMostrarTot();
                    solMostrada = false;
                    enablePanelEdicio(true);
                }
                else {
                    b_solucio.setText("Amagar solució");
                    mostrarTot();
                    solMostrada = true;
                    enablePanelEdicio(false);
                }
            }
        });
        b_jugar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                obrirJoc();
            }
        });
    }
    
    /*
     * Obre i retorna una instància de DialogProgressBar, creant l'objecte
     * Runnable que se li passa, definint així el comportament de quan es tanca
     * el dial. Aquest comportament és posar SolverControllerStop a stopped,
     * i posar enabled aquest frame
     */
    private DialogProgressBar obrirProgressBar(String titol) {
        DialogProgressBar dial = new DialogProgressBar(this,false,new Runnable() {
            @Override
            public void run() {
                SolverControllerStop.stop();
                dis.setEnabled(true);
            }
        });
        int x = dis.getLocation().x+(dis.getSize().width-dial.getSize().width)/2;
        int y = dis.getLocation().y+(dis.getSize().height-dial.getSize().height)/2;
        dial.setTitle(titol);
        dial.setLocation(new Point(x,y));
        dial.setVisible(true);
        return dial;
    }
    
    /*
     * Mostra un jOptionPane per escollir el nivell d'ajuda i posteriorment
     * comença una partida amb el hidato que s'estava editant
     */
    private void obrirJoc() {
        Object[] options = { "Baix", "Mitja","Alt" };
        int val = JOptionPane.showOptionDialog(null, "Tria el nivell d'ajuda", "",
        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
        null, options,options[0]);
        if (val != -1){
            Help h;
            if (val == 0) h = Help.LOW;
            else if (val == 1) h = Help.MEDIUM;
            else h = Help.HIGH;
            CurrentGameController cgc = hmc.playTempHidato(h);
            parent.obrirPartida(this, cgc);
        }
    }
    
    /*
     * Permet o prohibeix les comandes d'edició
     */
    private void enablePanelEdicio(boolean b) {
        panel_edicio.setEnabled(b);
        b_buida_esborrar.setEnabled(b);
        b_buida_posar.setEnabled(b);
        b_pista_posar.setEnabled(b);
        b_void.setEnabled(b);
        b_esborrar_tot.setEnabled(b);
        b_autocompletar.setEnabled(b);
        if (!b) {
            g1.clearSelection();
        }
    }
    
    /*
     * Esborra valors residuals de solucions o generacions anteriors al hidato
     * del hmc per efectuar una resolució o generació nova
     */
    private void posarZeros() {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (panels.get(i).get(j).getVal() == 0) {
                    hmc.setTempCellVal(i, j, 0);
                }
            }
        }
    }
    
    /*
     * Mostra tots els valors del hidato de hmc a la pantalla (és a dir la
     * solució)
     */
    private void mostrarTot() {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (hmc.getTempCellType(i, j) != CapaDomini.Tauler.Type.VOID) {
                    panels.get(i).get(j).setVal(hmc.getTempCellVal(i, j));
                    panels.get(i).get(j).setType(hmc.getTempCellType(i, j));
                }
            }
        }
    }
    
    /*
     * Mostra a la pantalla només els valors del hidato fixats per l'usuari 
     */
    private void noMostrarTot() {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (hmc.getTempCellType(i, j) == CapaDomini.Tauler.Type.BLANK) {
                    panels.get(i).get(j).setVal(fixats.get(i).get(j));
                }
            }
        }
    }
    
    /*
     * Demana un nom pel hidato, i no està utilitzat, guarda el hidato que
     * s'està editant amb aquell nom
     */
    private void desar() {
        if (nomHidato == null) {
            String newName = JOptionPane.showInputDialog(this,"Introdueix un nom per al hidato",null);
            if (newName == null) return;
            if (newName.equals("")) {
                msgError("Has d'introduir algun nom");
                return;
            }
            if (hmc.usedName(newName)) {
                msgError("Ja existeix un hidato amb aquest nom");
                return;
            }
            nomHidato = newName;
            label_nom.setText(newName);
        }
        if (label_dificultat.getText().equals("")) {
            hmc.calcTempDifficulty();
            label_dificultat.setText(hmc.getTempDifficulty());
        }
        hmc.saveTempHidato(nomHidato);
        msgInfo("Hidato " + nomHidato + " desat correctament");
    }
    
    /*
     * Funció que es duu a terme quan es pressiona sobre una SquareCell.
     * Consisteix en donar una informació a la SquareCell per poder gestionar
     * l'esdeveniment "press+release-moveOut"
     */
    private void mousePress (SquareCell p) {
        p.setLight(true);
    }
    
    /*
     * Funció que es duu a terme quan es deixa de pressionar sobre una SC.
     * Només actua quan ha vingut precedida d'un press sobre la mateixa sense
     * haver sortit en el temps entre press i release.
     * Fa la acció corresponent al RadioButton seleccionat en el panel d'edició:
     *  - Si esta seleccionat casella buida (esborrar), converteix en cel·la
     *    buida (BLANK) i n'esborra el valor.
     *  - Si esta seleccionat casella buida (posar), converteix la cel·la en
     *    buida (BLANK) i hi posa el valor que diu l'usuari.
     *  - Si esta seleccionat casella pista (posar), converteix la cel·la en
     *    pista (GIVEN) i hi posa el valor que diu l'usuari.
     *  - Si esta seleccionat casella no valida, converteix la cel·la en
     *    no valida (VOID).
     * Quan l'usuari entra un número, comprova que aquest sigui vàlid, mirant
     * que sigui un nombre estrictament positiu.
     * Quan s'efectua el canvi sobre el taulell, desactiva les opcions de desar
     * i jugar, ja que el hidato que queda no ha estat validat.
     */
    private void mouseRelease (SquareCell p) {
        if (p.getLight()) {
            if (b_buida_esborrar.isSelected()) {
                hmc.setTempCellType(p.getA(), p.getB(), CapaDomini.Tauler.Type.BLANK);
                p.setType(CapaDomini.Tauler.Type.BLANK);
                hmc.setTempCellVal(p.getA(), p.getB(), 0);
                p.setVal(0);
                fixats.get(p.getA()).set(p.getB(), 0);
                poderDesar(false);
            }
            else if (b_pista_posar.isSelected() || b_buida_posar.isSelected()) {
                int num;
                try {
                    String input = JOptionPane.showInputDialog("Escriu un número:");
                    if (input == null) return;
                    num = Integer.parseInt(input);
                    if (num <= 0) throw new Exception();
                    
                }
                catch (Exception e) {
                    msgError("Número no vàlid");
                    return;
                }
                hmc.setTempCellVal(p.getA(), p.getB(), num);
                p.setVal(num);
                fixats.get(p.getA()).set(p.getB(), num);
                CapaDomini.Tauler.Type t;
                if (b_buida_posar.isSelected()) t = CapaDomini.Tauler.Type.BLANK;
                else t = CapaDomini.Tauler.Type.GIVEN;
                hmc.setTempCellType(p.getA(), p.getB(), t);
                p.setType(t);
                poderDesar(false);
            }
            else if (b_void.isSelected()) {
                hmc.setTempCellType(p.getA(), p.getB(), CapaDomini.Tauler.Type.VOID);
                p.setType(CapaDomini.Tauler.Type.VOID);
                hmc.setTempCellVal(p.getA(), p.getB(), -1);
                p.setVal(0);
                fixats.get(p.getA()).set(p.getB(), 0);
                poderDesar(false);
            }
            p.setLight(false);
        }
    }
    
    /*
     * Si b == true, activa els botons de desar, mostrar solucio i jugar,
     * desactivant el de validar (ja que el hidato ja ha estat validat). A part,
     * calcula la dificultat del hidato i la mostra.
     * Si b == false, desactiva els botons de desar, mostrar solucio i jugar,
     * mentre que activa el de calidar (ja que el hidato acaba de passar a no
     * estar validat).
     * Segons l'estat de validat o no validat del hidato, el text del botó
     * validar és "Validar" (quan no ho està) o "Hidato validat!" (quan si)
     */
    private void poderDesar(boolean b) {
        b_desar.setEnabled(b);
        b_solucio.setEnabled(b);
        b_jugar.setEnabled(b);
        b_validar.setEnabled(!b);
        if (b) {
            hmc.calcTempDifficulty();
            label_dificultat.setText("Dificultat: " + hmc.getTempDifficulty());
            b_validar.setText("Hidato validat!");
        }
        else {
            solMostrada = false;
            label_dificultat.setText("Dificultat no calculada");
            b_solucio.setText("Mostrar solució");
            b_validar.setText("Validar");
        }
    }
    
    /*
     * Mostra un missatge d'error amb la informació text
     */
    private void msgError(String text) {
        JOptionPane.showMessageDialog(this,text,"Error",JOptionPane.ERROR_MESSAGE);
    }
    
    /*
     * Mostra un missatge informatiu amb la informació text
     */
    private void msgInfo(String text) {
        JOptionPane.showMessageDialog(this,text,"",JOptionPane.INFORMATION_MESSAGE);
    }
    
}
